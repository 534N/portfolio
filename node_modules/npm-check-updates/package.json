{
  "name": "npm-check-updates",
  "version": "1.5.0",
  "author": {
    "name": "Tomas Junnonen",
    "email": "tomas1@gmail.com"
  },
  "description": "Find newer versions of dependencies than what your package.json allows",
  "keywords": [
    "npm",
    "check",
    "find",
    "discover",
    "updates",
    "upgrades",
    "dependencies",
    "package.json",
    "updater",
    "version",
    "management"
  ],
  "preferglobal": true,
  "main": "./lib/npm-check-updates",
  "scripts": {
    "test": "mocha"
  },
  "bin": {
    "npm-check-updates": "./bin/npm-check-updates"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/tjunnone/npm-check-updates.git"
  },
  "homepage": "https://github.com/tjunnone/npm-check-updates",
  "dependencies": {
    "async": "0.9.x",
    "cint": "^8.0.1",
    "commander": "2.5.x",
    "lodash": "^2.4.1",
    "npm": "2.1.x",
    "read-package-json": "1.2.x",
    "semver": "4.1.x"
  },
  "devDependencies": {
    "mocha": "^2.0.1",
    "should": "4.3.x"
  },
  "readme": "npm-check-updates\n=================\n\nnpm-check-updates is a tool that allows you to **find the latest versions of\ndependencies**, regardless of any version\nconstraints in your package.json file (unlike npm itself).\n\nnpm-check-updates can optionally upgrade your package.json file to\nuse the latest available versions, all while **maintaining your\nexisting semantic versioning policies**.\n\nPut plainly, it will upgrade your \"express\": \"3.3.x\" dependency to\n\"express\": \"3.4.x\" when express 3.4.0 hits the scene.\n\nView the [options](#options) for global, dev-only, prod-only, or filtering by package name.\n\nMotivation\n--------------\n\n[Package.json best practices](http://blog.nodejitsu.com/package-dependencies-done-right) recommends maintaining dependencies using a [semantic versioning](http://semver.org/) policy. In practice you do this by specifying a \"1.2.x\" style dependency in your package.json, whereby patch-level updates are automatically allowed but major and minor releases require manual verification.\n\nUnfortunately, it then becomes your responsibility to find out about new\npackage releases, for example by using \"npm info\" command one package at a time, or by visiting project pages.\n\nWhatever your versioning policy, npm-check-updates will make keeping your\ndependencies up to date a breeze.\n\n\nInstallation\n--------------\n\n```sh\nnpm install -g npm-check-updates\n```\n\nExamples\n--------------\n\nShow any new dependencies for the project in the current directory:\n```sh\n$ npm-check-updates\n\n\"connect\" can be updated from 2.8.x to 2.11.x  (Installed: 2.8.8, Latest: 2.11.0)\n\"commander\" can be updated from 1.3.x to 2.0.x (Installed: 1.3.2, Latest: 2.0.0)\n\nRun with '-u' to upgrade your package.json\n```\n\nUpgrade a project's package.json:\n```sh\n$ npm-check-updates -u\n\n\"request\" can be updated from 2.20.x to 2.27.x (Installed: 2.20.0, Latest: 2.27.1)\n\npackage.json upgraded\n```\n\nFilter by package name:\n```sh\n$ npm-check-updates -f mocha,should         # string\n$ npm-check-updates -f /^((?!gulp-).)*$/    # regex\n```\n\nOptions\n--------------\n    -d, --dev                check only devDependencies\n    -h, --help               output usage information\n    -f, --filter <packages>  list or regex of package names to search (all others\n                             will be ignored)\n    -g, --global             check global packages instead of in the current project\n    -p, --prod               check only dependencies (not devDependencies) don't\n    -s, --silent             output anything\n    -u, --upgrade            upgrade package.json dependencies to match latest \n                             versions (maintaining existing policy)\n    -V, --version            output the version number\n\n\nHistory\n--------------\n\n- 1.5\n  - Add prod and dev only options\n- 1.4\n  - Add package filtering option\n  - Add mocha as npm test script\n- 1.3\n  - Handle private packages and NPM errors\n  - Added Mocha tests\n  - Bugfixes\n- 1.2\n  - Print currently installed and latest package version in addition to semantic versions\n  - Fixed bug where extra whitespace in package.json may prevent automatic upgrade\n- 1.1\n  - Added option to check global packages for updates: -g switch\n  - Now also checks and upgrades devDependencies in package.json\n- 1.0\n  - Find and upgrade dependencies maintaining existing versioning policy in package.json\n\nHow dependency updates are determined\n--------------\n\n- Direct dependencies will be increased to the latest available version:\n  - 2.0.1 => 2.2.0\n  - 1.2 => 1.3\n-  Semantic versioning policies for levels are maintained while satisfying the latest version:\n  - 1.2.x => 1.3.x\n  - 1.x => 2.x\n- \"Any version\" is maintained:\n  - \\* => \\*\n- Version constraints are maintained:\n  - \\>0.2.x => \\> 0.3.x\n  - \\>=1.0.0 => >=1.1.0\n- Dependencies newer than the latest available version are suggested to be downgraded, as it's likely a mistake:\n  - 2.0.x => 1.7.x, when 1.7.10 is the latest available version\n  - 1.1.0 => 1.0.1, when 1.0.1 is the latest available version\n\nProblems?\n--------------\n\nPlease [file an issue on github](https://github.com/tjunnone/npm-check-updates/issues).\n\nPull requests are welcome :)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tjunnone/npm-check-updates/issues"
  },
  "_id": "npm-check-updates@1.5.0",
  "dist": {
    "shasum": "847bdf4d8b281a6e3129024005467ff74295241b"
  },
  "_from": "npm-check-updates@",
  "_resolved": "https://registry.npmjs.org/npm-check-updates/-/npm-check-updates-1.5.0.tgz"
}
